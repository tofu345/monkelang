let fibonacci = fn(num) {
    // memoization is nice
    let seen = {0: 0, 1: 1};
    let fib = fn(num) {
        let res = seen[num];
        if (res != null) { 
            return res; 
        }

        // very sane syntax
        return seen[num] = fib(num - 1) + fib(num - 2);
    };
    fib(num);
};

let map = fn(f, arr) {
    let iter = fn(arr, accumulated) {
        if (len(arr) == 0) {
            accumulated
        } else {
            iter(rest(arr), push(accumulated, f(first(arr))));
        }
    };
    iter(arr, []);
};

let reduce = fn(arr, initial, f) {
    let iter = fn(arr, result) {
        if (len(arr) == 0) {
            result
        } else {
            iter(rest(arr), f(result, first(arr)));
        };
    }
    iter(arr, initial);
};
let sum = fn(arr) {
    reduce(arr, 0, fn(initial, el) { initial + el });
};


let numbers = [1, 1 + 1, 4 - 1, 2 * 2, 2 + 3, 12 / 2];
puts("numbers:", numbers);
puts("map(fibonacci, numbers):", map(fibonacci, numbers));

puts("fibonacci of 35:", fibonacci(35));

let a = [1, 2, 3, 4];
let double = fn(x) { x * 2 };
let res = map(double, a);
puts("a", a, "map(double, a):", res);

let arr = [1, 2, 3, 4, 5];
puts("arr: ", arr, "sum(arr)", sum(arr));
